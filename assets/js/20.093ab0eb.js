(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{242:function(a,n,t){"use strict";t.r(n);var e=t(0),s=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[a._v("#")]),a._v(" 定义")]),a._v(" "),t("ul",[t("li",[a._v("模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 普通字符串\n`In JavaScript \'\\n\' is a line-feed.`\n\n// 多行字符串\n`In JavaScript this is\n not legal.`\n\nconsole.log(`string text line 1\nstring text line 2`);\n\n// 字符串中嵌入变量\nvar name = "Bob", time = "today";\n`Hello ${name}, how are you ${time}?`\n')])])]),t("ul",[t("li",[a._v("上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var greeting = `\\`Yo\\` World!`;\n")])])]),t("ul",[t("li",[a._v("如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`);\n")])])]),t("ul",[t("li",[a._v("模板字符串中嵌入变量，需要将变量名写在${}之中。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function authorize(user, action) {\n  if (!user.hasPrivilege(action)) {\n    throw new Error(\n      // 传统写法为\n      // 'User '\n      // + user.name\n      // + ' is not authorized to do '\n      // + action\n      // + '.'\n      `User ${user.name} is not authorized to do ${action}.`);\n  }\n}\n")])])]),t("ul",[t("li",[a._v("大括号内部可以放入任意的JavaScript表达式，可以进行运算，以及引用对象属性。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var x = 1;\nvar y = 2;\n\n`${x} + ${y} = ${x + y}`\n// "1 + 2 = 3"\n\n`${x} + ${y * 2} = ${x + y * 2}`\n// "1 + 4 = 5"\n\nvar obj = {x: 1, y: 2};\n`${obj.x + obj.y}`\n// "3"\n')])])]),t("h2",{attrs:{id:"标签模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标签模板"}},[a._v("#")]),a._v(" 标签模板")]),a._v(" "),t("ul",[t("li",[a._v("模板字符串可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("alert`123`\n// 等同于\nalert(123)\n")])])]),t("ul",[t("li",[a._v("标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = 5;\nvar b = 10;\n\ntag`Hello ${ a + b } world ${ a * b }`;\n// 等同于\ntag(['Hello ', ' world ', ''], 15, 50);\n")])])]),t("ul",[t("li",[a._v("tag函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。\neg:")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var a = 5;\nvar b = 10;\n\nfunction tag(s, v1, v2) {\n  console.log(s[0]);\n  console.log(s[1]);\n  console.log(s[2]);\n  console.log(v1);\n  console.log(v2);\n\n  return "OK";\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// "Hello "\n// " world "\n// ""\n// 15\n// 50\n// "OK"\n')])])]),t("h2",{attrs:{id:"string-raw"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-raw"}},[a._v("#")]),a._v(" String.raw()")]),a._v(" "),t("ul",[t("li",[a._v("String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("String.raw`Hi\\n${2+3}!`;\n// \"Hi\\\\n5!\"\n\nString.raw`Hi\\u000A!`;\n// 'Hi\\\\u000A!'\n")])])]),t("ul",[t("li",[a._v("如果斜杠已经转义，则不作任何处理")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('String.raw`Hi\\\\n`\n// "Hi\\\\n"\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);